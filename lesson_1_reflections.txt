How did viewing a diff between two versions of a file help you see the
bug that was introduced?

	By looking at only the code that was either added or removed, I 
	was able to pinpoint the incorrect code more efficiently. 

How could having easy access to the entire history of a file make you 
a more efficient programmer in the long term?

    At a glance, I can skim what changes have been made and where the
    project currently stands.

What do you think are the pros and cons of manually choosing when to 
create a commit, like you do in Git, vs having versions automatically 
saved, like Google docs does?

    You can choose the point at which you think substantial changes 
    have been made and create a note regarding those changes. This 
    will likely lead to fewer versions, and ensure that the 
    differences between the versions are meaningful. The biggest 
    downfall with manually saving is the potential for human error. 

Why do you think some version control systems, like Git, allow saving 
multiple files in one commit, while others, like Google Docs, treat 
each file separately?

	Git recognizes that there are multiple files that go into creating 
	a program and that one change to a program can involve altering 
	code in all files. Meanwhile, Google Docs has a broader, less 
	specific target audience and the layperson is using it to create 
	documents for group projects, etc. For these simpler tasks, 
	treating each file as separate makes sense, as it is not usually 
	more than one file involved.
    
How can you use the commands git log and git diff to view the history 
of files?

    Git log will show all of the commits made, which will include 
    their IDs and a description. This will show what has been done in 
    the program so far. Gif diff will show what changes were made to 
    the program between two commits, helping you pinpoint problems.

How might using version control make you more confident to make 
changes that could break something?

    Version control can give the confidence to experiment and make 
    significant changes to the code, with the knowledge that if a bug 
    is introduced, you can easily revert to a version of the program 
    that is fully functional. You can then continue to experiment 
    without feeling as though you msut start from scratch or waste 
    time scouring many lines of code to find and fix the bug.

Now that you have your workspace set up, what do you want to try using 
Git for?

    version control, and more advanced concepts